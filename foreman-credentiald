#!/usr/bin/env python3

import asyncio
import logging
import socket
import sys
import os
from pathlib import Path

from systemd.daemon import listen_fds

log = logging.getLogger("foreman-credentiald")
log.propagate = False
log.setLevel(logging.INFO)

if 'DEBUG' in os.environ:
    log.addHandler(logging.StreamHandler())
else:
    from systemd import journal
    log.addHandler(journal.JournalHandler(SYSLOG_IDENTIFIER="foreman-credentiald"))


BASE_DIRECTORY = Path(os.environ['STATE_DIRECTORY'])


async def get_credential(service, credential):
    service, _ = service.split('.')
    return BASE_DIRECTORY / service / credential


async def client_connected_cb(_reader, writer):
    _, _, service, credential = (
        writer.get_extra_info("peername").decode("utf-8").split("/")
    )
    log.info("Got connection from %s, credential %s", service, credential)
    try:
        path = await get_credential(service, credential)
        with path.open('rb') as f:
            loop = asyncio.get_event_loop()
            await loop.sendfile(writer.transport, f)
        await writer.drain()
    except FileNotFoundError:
        log.error('No credential %s found for %s', credential, service)
    except Exception as e:
        log.exception(e)
    finally:
        writer.close()
        await writer.wait_closed()


async def main():
    socket_fds = listen_fds()
    if len(socket_fds) == 0:
        log.info("No sockets passed, exiting")
        sys.exit(0)
    elif len(socket_fds) > 1:
        log.warning("More than 1 socket passed, not supported")
        sys.exit(1)
    sock = socket.socket(fileno=socket_fds[0])

    server = await asyncio.start_unix_server(client_connected_cb, sock=sock)
    await server.serve_forever()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
    except Exception as e:
        log.exception(e)
        sys.exit(2)
